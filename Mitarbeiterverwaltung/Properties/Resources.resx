<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpString" xml:space="preserve">
    <value>Informationen zum Programm:

Das Ihnen vorliegende Programm dient der Arbeitszeiterfassung und Verwaltung von Urlauben für die Mitarbeiter Ihrer Firma. Im Umfang des Programms ist die Beantragung von Urlaub, die Genehmigung und das Einsehen der übrigen Urlaubstage und Überstunden enthalten.

LoginView:
Der Startbildschirm des Programmes enthält den LoginView. Zum Einloggen benötigen Sie ihre persönliche Mitarbeiter ID. 

Firmensettings:
Informationen zu den hinterlegten Firmeninformationen finden Sie in der oberen, linken Ecke des Startbildschirmes. Unter „Datei“-&gt; „Einstellungen“ haben Sie die Möglichkeit, bei Änderungen an ihren Firmeninformationen, den Namen Ihrer Firma oder Ihr Logo zu ändern und die Einstellungen zur Zeiterfassung anzupassen. Überprüfen können Sie die hinterlegten Daten unter „Info“.

Zeiterfassung:
Nach gelungener Anmeldung (siehe LoginView) gelangen Sie zum MainView, des Programms. Zur Arbeitszeiterfassung bietet das Programm auf der Zentral eine „Einstempeln“-Funktion. Ob das Einstempeln erfolgreich war, erkennen Sie daran, ob an gleicher Stelle nun die Funktion „Ausstempeln“ erscheint. Die Zeiterfassung läuft nun bis zum Zeitpunkt des Ausstempelns.

Urlaubsverwaltung:
Ebenfalls im MainView in der unteren linken Seite des Programms befindet sich die Urlaubsverwaltung. Unter diesem Reiter haben Sie die Möglichkeiten „Neuen Antrag stellen“, um einen Urlaub zu beantragen und „Anträge einsehen“, um den Status Ihrer bisherigen Anträge zu prüfen. Zusätzlich zum Start- und Enddatum Ihres Urlaubs haben Sie die Möglichkeit auszuwählen, ob Beginn oder Ende des Urlaubes aus einem halben Urlaubstag bestehen soll, dies geschieht durch Auswählen des Kastens „halber Tag“ neben dem gewünschten Datum. Zur Vervollständigung des Antrages können Sie Ihre verbleibenden Urlaubstage und Überstunden einsehen und auswählen, ob zuerst Überstunden verwendet werden sollen. Zum Abschluss des Antrages wählen Sie „Absenden“.

Mitarbeiter-Verwaltung:
Im Falle einer vorliegenden Führungsaufgabe haben Sie zusätzlich die Möglichkeit durch ein zugewiesenes Passwort Zugang zum ManagementView zu erlangen. Im Falle des Vergessens oder wenn Sie Ihr Passwort ändern wollen, müssen Sie bei Ihrer/m Vorgesetzten/m ein neues Passwort beantragen. 
In der Ansicht des ManagementView erhalten Sie eine Übersicht über Ihre untergebenen Mitarbeiter, deren Arbeitszeiten und Urlaubstage. An dieser Stelle besitzen Sie in der unteren, linken Ecke des Programms die Möglichkeit eine/n neue/n Mitarbeiter/in Anzulegen „Mitarbeiter Hinzufügen“ (siehe NewEmployeeView) oder eine/n ausgewählte/n Miterabeiter/in zu bearbeiten „Mitarbeiter Bearbeiten“ (siehe EmployeeView). 

EmployeeView:
Die Mitarbeiter-Verwaltung bietet die Möglichkeit angelegte Untergebene zu bearbeiten (siehe Mitarbeiter-Verwaltung). In der Ansicht des EmployeeViews befinden sich die Reiter „Persönliche Daten“, „Pausenzeiten“, „Stempelzeiten“, „Krankheit“ und „Urlaub“. Außerdem findet sich hier die Möglichkeit einen Mitarbeiter zu entfernen.

EmployeeView- Persönliche Daten:
In dem Reiter “Persönliche Daten“ lässt sich die Anschrift des Untergebenen bearbeiten und gleichzeitig die vorgesehenen Arbeitsstunden und Urlaubstage festlegen. Außerdem befindet sich in diesem Reiter die Möglichkeit für den Vorgesetzten das Passwort für seinen Untergebenen neu zu setzten (siehe Mitarbeiter-Verwaltung).

EmployeeView-Pausenzeiten:
In diesem Reiter lassen sich neue Pausenzeiten für den Mitarbeiter mit Beginn und Endzeit erstellen oder Pausen entfernen.

EmployeeView-Stempelzeiten:
Der Reiter „Stempelzeiten“ dient vorranging der Korrektur Fehleingetragener Stempelzeiten durch den Untergebenen. So lassen sich hier dokumentierte Zeiten ändern.

EmployeeView-Krankheit:
Der Reiter „Krankheit“ ermöglicht es Fehltzeiten des Mitarbeiters anzulegen.

EmployeeView- Urlaub:
Der letzte Reiter des EmployeeView „Urlaub“ stellt die Vorgesetzten Perspektive der Anträge auf Urlaub dar (siehe Urlaubsverwaltung). Hier kann ein eingegangener Antrag ausgewählt und entweder genehmigt oder verweigert werden.

NewEmployeeView:
Die Funktion „Mitarbeiter Hinzufügen“ beinhaltet zwei Reiter, „Persönliche Daten“ und „Pausenzeiten“. An dieser Stelle lassen sich somit die unter EmployeeView bearbeitbaren Informationen zu einem untergebenen erstmalig anlegen.</value>
  </data>
</root>